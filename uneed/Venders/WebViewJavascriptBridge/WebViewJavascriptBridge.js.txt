;(function() {
	if (window.WBMovieJSBridge) { return }
    var messagingIframe;
    var sendMessageQueue = [];
    var receiveMessageQueue = [];
    var messageHandlers = {};

    var CUSTOM_PROTOCOL_SCHEME = 'wvjbscheme';
    var QUEUE_HAS_MESSAGE = '__WVJB_QUEUE_MESSAGE__';

    var responseCallbacks = {};
    var uniqueId = 1;

	function _createQueueReadyIframe(doc) {
        messagingIframe = doc.createElement('iframe');
        messagingIframe.style.display = 'none';
        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;
        doc.documentElement.appendChild(messagingIframe);
	}

	function init(messageHandler) {
        if (WBMovieJSBridge._messageHandler) { throw new Error('WBMovieJSBridge.init called twice'); }
        WBMovieJSBridge._messageHandler = messageHandler;
        if(receiveMessageQueue != null) {
            var receivedMessages = receiveMessageQueue;
            receiveMessageQueue = null;
            for (var i=0; i<receivedMessages.length; i++) {
                _dispatchMessageFromObjC(receivedMessages[i]);
            }
        }
	}

	function send(data, responseCallback) {
        _doSend({ data:data }, responseCallback);
	}
	
	function registerHandler(handlerName, handler) {
        messageHandlers[handlerName] = handler;
	}
	
	function callHandler(handlerName, data, responseCallback) {
        _doSend({ handlerName:handlerName, data:data }, responseCallback);
	}
	
	function _doSend(message, responseCallback) {
		if (responseCallback) {
            var callbackId = 'cb_'+(uniqueId++)+'_'+new Date().getTime();
            responseCallbacks[callbackId] = responseCallback;
            message['callbackId'] = callbackId;
		}
        sendMessageQueue.push(message);
        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;
	}

	function _fetchQueue() {
        var messageQueueString = JSON.stringify(sendMessageQueue);
        sendMessageQueue = [];
        return messageQueueString;
	}

	function _dispatchMessageFromObjC(messageJSON) {
		setTimeout(function _timeoutDispatchMessageFromObjC() {
        var message = JSON.parse(messageJSON);
        var messageHandler;
        var responseCallback;

			if (message.responseId) {
                responseCallback = responseCallbacks[message.responseId];
				if (!responseCallback) { return; }
                responseCallback(message.responseData.data, message.responseData.success, message.responseData.code);
                delete responseCallbacks[message.responseId];
			} else {
				if (message.callbackId) {
                    var callbackResponseId = message.callbackId;
					responseCallback = function(responseData) {
                        _doSend({ responseId:callbackResponseId, responseData:responseData });
					}
				}
				
                var handler = WBMovieJSBridge._messageHandler;
				if (message.handlerName) {
                    handler = messageHandlers[message.handlerName];
				}
				
				try {
                    handler(message.data, responseCallback);
				} catch(exception) {
					if (typeof console != 'undefined') {
                        console.log("WBMovieJSBridge: WARNING: javascript handler threw.", message, exception);
					}
				}
			}
		})
	}
	
	function _handleMessageFromObjC(messageJSON) {
		if (receiveMessageQueue) {
            receiveMessageQueue.push(messageJSON);
		} else {
            _dispatchMessageFromObjC(messageJSON);
		}
	}

    var statusCode = {
        OK:0,	            //操作成功
        MISSING_PARAMS:1,	//缺少必须的参数
        ILLEGAL_ACCESS:2,	//非法调用
        INTERNAL_ERROR:3,	//客户端内部处理错误
        ACTION_NOT_FOUND:4,	//客户端未实现此 action
        NO_RESULT:5,	    //客户端没有获取到结果
        USER_CANCELLED:6,	//用户取消了操作
        SERVICE_FORBIDDEN:7
    }

	window.WBMovieJSBridge = {
		init: init,
		send: send,
		registerHandler: registerHandler,
		invoke: callHandler,
		_fetchQueue: _fetchQueue,
		_handleMessageFromObjC: _handleMessageFromObjC,
        STATUS_CODE: statusCode,
	}

    var doc = document;
    _createQueueReadyIframe(doc);
    var readyEvent = doc.createEvent('Events');
    readyEvent.initEvent('WBMovieJSBridgeReady');
    readyEvent.bridge = WBMovieJSBridge;
    doc.dispatchEvent(readyEvent);
}());
